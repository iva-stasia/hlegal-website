@use '../abstracts/variables' as *;

@mixin font-face(
    $font-family,
    $file-path,
    $font-style: normal,
    $font-weight: 400,
    $file-formats: eot woff2 woff ttf svg,
    $font-formats: embedded-opentype woff2 woff truetype svg
) {
    @if & {
        @error "You must call the mixin at the root level of your style sheet, not in the `#{&+'{'+'}'}` selector.";
    } @else {
        $list: ();

        @if index(100 200 300 400 500 600 700 800 900, $font-style) {
            $font-weight: $font-style;
            $font-style: normal;
        } @else if not
            index('normal' 'italic' 'oblique', $font-style) and
            type-of($font-style) !=
            'number'
        {
            $font-style-list: ();
            @for $i from 1 through length($font-style) {
                $font-style-list: append(
                    $font-style-list,
                    nth($font-style, $i),
                    comma
                );
            }
            @for $i from 1 through length($font-style-list) {
                @if index(
                    'eot' 'woff2' 'woff' 'ttf' 'svg',
                    nth($font-style-list, $i)
                )
                {
                    $file-formats: $font-style-list;
                    $font-style: normal;
                }
            }
        }

        @font-face {
            font-family: $font-family;
            @if index($file-formats, eot) {
                src: url('#{$file-path}.eot');
            }
            @for $i from 1 through length($file-formats) {
                $list: append($list, url('#{$file-path}.#{nth($file-formats, $i)}') 
                format('#{nth($font-formats, $i)}'), $separator: comma);
            }
            src: $list;
            font-style: $font-style;
            font-weight: $font-weight;
            font-display: swap;
            @content;
        }
    }
}

@mixin mq($breakpoint) {
    $size: map-get($breakpoints , $breakpoint);
    @media screen and (max-width: $size) {
        @content;
    }
}

@mixin mq-min($breakpoint) {
    $size: map-get($breakpoints-min , $breakpoint);
    @media screen and (min-width: $size) {
        @content;
    }
}

@mixin flex($justify, $align) {
    display: flex;
    justify-content: $justify;
    align-items: $align;
}
